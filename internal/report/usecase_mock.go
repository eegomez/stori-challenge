// Code generated by MockGen. DO NOT EDIT.
// Source: internal/report/usecase.go

// Package report is a generated GoMock package.
package report

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// SendReport mocks base method.
func (m *MockUseCase) SendReport(ctx context.Context, destinationEmailAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReport", ctx, destinationEmailAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReport indicates an expected call of SendReport.
func (mr *MockUseCaseMockRecorder) SendReport(ctx, destinationEmailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReport", reflect.TypeOf((*MockUseCase)(nil).SendReport), ctx, destinationEmailAddress)
}

// createReport mocks base method.
func (m *MockUseCase) createReport(ctx context.Context) (*Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createReport", ctx)
	ret0, _ := ret[0].(*Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createReport indicates an expected call of createReport.
func (mr *MockUseCaseMockRecorder) createReport(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createReport", reflect.TypeOf((*MockUseCase)(nil).createReport), ctx)
}
